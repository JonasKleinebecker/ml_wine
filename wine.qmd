---
title: "Fish Data Analysis"
jupyter: python3
---

## Imports
```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from sklearn.svm import SVC
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import plotly.express as px
```

## Load Dataset
```{python}
wine_df = pd.read_csv("./wine.data", header=None)
wine_df.columns = ["class", "alcohol", "malic_acid", "ash", "alcalinity", "magnesium", "phenols", "flavanoids", "nonflavanoids", "proanthocyanins", "color", "hue", "od280/od315", "proline"]
wine_df.sample(5)
```

## Exploratory Data Analysis
```{python}
wine_df.describe()
```
## Scatter Plots
```{python}
class_dfs = []
for c in wine_df["class"].unique():
  class_dfs.append(wine_df[wine_df["class"] == c])
for col in wine_df.drop("class", axis=1).columns:
  fig = plt.figure()
  ax = fig.add_subplot(111)
  for class_df in class_dfs:
    ax.hist(class_df[col], bins=10, alpha=0.75, label=class_df["class"].unique()[0])
  plt.legend(title="Class")
  plt.title(f"{col} Histogram")
  plt.show()
```
## Box Plots
```{python}
for col in wine_df.drop("class", axis=1).columns:
  fig = plt.figure()
  ax = fig.add_subplot(111)
  for class_df in class_dfs:
    ax.boxplot(class_df[col], positions=[class_df["class"].unique()[0]])
  plt.title(f"{col} Boxplot")
  plt.show()
```
## Parrallel Coordinates Plot
```{python}
fig = px.parallel_coordinates(wine_df, color="class", dimensions=wine_df.drop("class", axis=1).columns)
fig.show()
```

## Data Preprocessing
```{python}
X_train, X_test = train_test_split(wine_df, test_size=0.2, random_state=42)
y_train = X_train.pop("class")
y_test = X_test.pop("class")

X_train = (X_train - X_train.mean()) / X_train.std()
X_test = (X_test - X_test.mean()) / X_test.std()
```
## Multinomial Logistic Regression
```{python}
model_softmax = LogisticRegression(solver='lbfgs')
model_softmax.fit(X_train, y_train)
training_accuracy = model_softmax.score(X_train, y_train)

y_pred = model_softmax.predict(X_test)
report = classification_report(y_test, y_pred)
print(report)
```


